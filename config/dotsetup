#!/usr/bin/env zsh

local help verbose_flag default_flag all_flag dry_flag delete_flag custom 

local name="${0:t}"
local usage=(
    'Usage:'
    "\t$name [-h|--help]"
    "\t$name [--uninstall]"
    "\t$name [-a|--all]"
    "\t$name [-n|--dry-run]"
    "\t$name [-v|--verbose]"
    "\t$name [-d|--default]"
    "\t$name [-c|--custom] <name_of_relative_module>"
)

local deps=(
    'stow'
    'git'
)

zparseopts -D -F -- \
    {h,-help}=help \
    {v,-verbose}=verbose_flag \
    {a,-all}=all_flag \
    {d,-default}=default_flag \
    {c,-custom}+:=custom \
    {n,-dry-run}=dry_flag \
    -uninstall=delete_flag ||
    { print -l "\n${(@)usage}" && exit 1 }

[[ -z $help ]] || { print -l "${(@)usage}" && exit 0 }

function parse_argv() {
    [[ -z $custom ]] || {
        local temp=()
        for i in {2..$#custom..2}; do
            temp+=("${custom[$i]}")
        done

        custom=("${(@)temp}")
    }
}

function check_deps() {
    [[ -n $deps ]] || { echo '[!] Incorrect env - check_deps' && exit 2 }

    local failed
    for dep in "${(@)deps}"; do
        type "$dep" &>/dev/null || { echo '[!] Missing -' "$dep" && failed=1 }
    done

    [[ -z $failed ]] || { exit 1 }
}

function check_module() {
    local module="$1"
    [[ -n $module ]] || { echo '[!] Incorrect usage - check_module' && exit 2 }

    [[ -e $module ]] || { echo '[!] Dirictory does not exist -' "$module" && exit 1 }
    [[ -d $module ]] || { echo '[!] File is not a directory -' "$module" && exit 1 }
}

function deploy_module() {
    local location="$1"
    local module_name="$2"
    [[ -n $location && -n $module_name ]] || { echo '[!] Incorrect usage - deploy_module' && exit 2 }

    local module="$location/$module_name"
    check_module "$module"

    local args=(
        # restow
        '-R'
    )

    [[ -z $dry_flag ]] || { args+=('--simulate') }
    [[ -z $delete_flag ]] || { args+=('--delete') }

    local packages=()

    for package in "$module"/*; do
        packages+=("$(basename $package)")
    done

    [[ -z $verbose_flag ]] || {
        args+=('-v')

        echo '[?] Packages in the module:'

        for idx in {1..$#packages}; do
            echo "$idx." "${packages[$idx]}"
        done

        echo '\n<Enter> to continue'
        read
	}

    stow \
        "${(@)args}" \
        -t "$HOME" \
        -d "$module" \
        "${(@)packages}"

    return $?
}

function get_all_modules() {
    local exec_basedir="$1"
    [[ -n $exec_basedir ]] || { echo '[!] Incorrect usage - get_all_modules' && exit 2 }

    local res=()
    for module in "$exec_basedir"/*; do
        [[ -d $module ]] || continue
        res+=("$(basename $module)")
    done

    echo "${(@)res}"
}

function main() {
    local exec_basedir="$1"
    [[ -n $exec_basedir ]] || { echo '[!] Incorrect usage - main' && exit 2 }

    check_deps
    parse_argv

    local modules=()
    typeset -U modules

    [[ -n $all_flag ]] && {
        modules=($(get_all_modules "$exec_basedir"))
    } || {
        [[ -z $use_default ]] || { modules+=('default') }
        [[ -z $custom ]] || { modules+=(${(@)custom}) }
    }

    for module in "${(@)modules}"; do
        [[ -z $verbose_flag ]] || {
            echo '\n[?] Deploy module -' "$module"
            echo '<Enter> to continue'
            read
        }

        deploy_module "$exec_basedir" "$module"
    done
}

main "$(dirname $(realpath $0))"
